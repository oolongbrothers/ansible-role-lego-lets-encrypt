---

- name: "Check certificate validity"
  become: true
  become_user: "{{ lets_encrypt_client_user }}"
  block:

    - name: "Check if certificates exist or not"
      stat:
        path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name | replace('*', '_') }}.crt"
      register: lets_encrypt_resource_stat_result

    - name: "Check if a certificate is currently still valid and generated by lets encrypt"
      openssl_certificate:
        path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name | replace('*', '_') }}.crt"
        provider: assertonly
        issuer:
          O: "Let's Encrypt"
        has_expired: False
      ignore_errors: True
      register: lets_encrypt_ressource_validity_check

    - name: "Remove wrong/expired cert"
      file:
        path: "{{ lets_encrypt_directory_path }}/certificates/{{ lets_encrypt_resource.common_name | replace('*', '_') }}.crt"
        state: absent
      when:
        - lets_encrypt_resource is not skipped
        - lets_encrypt_resource_stat_result.stat.exists == true
        - lets_encrypt_ressource_validity_check.failed

- name: "Configure Let's Encrypt cert manager service"
  become: true
  block:
    
    - name: "Create certificate service override directory for certificate {{ lets_encrypt_resource.common_name }}"
      file:
        state: directory
        path: "/lib/systemd/system/lets-encrypt-cert-manager@{{ lets_encrypt_resource.common_name | replace('*', '_') }}.service.d"
        owner: root
        group: root
        mode: 0700
      when:
        - lets_encrypt_resource is not skipped
        - ( lets_encrypt_resource_stat_result.stat.exists == false ) or ( lets_encrypt_ressource_validity_check.failed )

    - name: "Install Let's Encrypt cert manager service for certificate {{ lets_encrypt_resource.common_name }}"
      template:
        src: "override.conf"
        dest: "/lib/systemd/system/lets-encrypt-cert-manager@{{ lets_encrypt_resource.common_name | replace('*', '_') }}.service.d/override.conf"
        owner: root
        group: root
        mode: 0600
      no_log: true
      notify: systemd daemon-reload
      when:
        - lets_encrypt_resource is not skipped
        - ( lets_encrypt_resource_stat_result.stat.exists == false ) or ( lets_encrypt_ressource_validity_check.failed )

    - name: "Schedule Let's Encrypt cert manager service for certificate {{ lets_encrypt_resource.common_name }}"
      template:
        src: "lets-encrypt-cert-manager@.timer"
        dest: "/lib/systemd/system/lets-encrypt-cert-manager@{{ lets_encrypt_resource.common_name | replace('*', '_') }}.timer"
        owner: root
        group: root
        mode: 0644
      notify: systemd daemon-reload

    - meta: flush_handlers

    - name: "Start Let's Encrypt cert manager service for certificate {{ lets_encrypt_resource.common_name }}"
      systemd:
        name: "lets-encrypt-cert-manager@{{ lets_encrypt_resource.common_name | replace('*', '_') }}.service"
        state: started
        enabled: true

    - name: "Schedule Let's Encrypt cert manager service for certificate {{ lets_encrypt_resource.common_name }}"
      systemd:
        name: "lets-encrypt-cert-manager@{{ lets_encrypt_resource.common_name | replace('*', '_') }}.timer"
        state: started
        enabled: true
